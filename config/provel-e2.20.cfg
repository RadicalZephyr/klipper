# This file serves as documentation for config parameters. One may
# copy and edit this file to configure a new cartesian style
# printer. For delta style printers, see the "example-delta.cfg"
# file. For corexy/h-bot style printers, see the "example-corexy.cfg"
# file. Only common config sections are described here - see the
# "example-extras.cfg" file for configuring less common devices.

# DO NOT COPY THIS FILE WITHOUT CAREFULLY READING AND UPDATING IT
# FIRST. Incorrectly configured parameters may cause damage.

# A note on pin names: pins may be configured with a hardware name
# (such as "PA4") or with an Arduino alias name (such as "ar29" or
# "analog3"). In order to use Arduino names, the pin_map variable in
# the mcu section must be present and have a value of "arduino". Pin
# names may be preceded by an '!' to indicate that a reverse polarity
# should be used (eg, trigger on low instead of high). Input pins may
# be preceded by a '^' to indicate that a hardware pull-up resistor
# should be enabled for the pin. If the micro-controller supports
# pull-down resistors then an input pin may alternatively be preceded
# by a '~'.


# The stepper_x section is used to describe the stepper controlling
# the X axis in a cartesian robot.
[stepper_x]
step_pin: ar5
#   Step GPIO pin (triggered high). This parameter must be provided.
dir_pin: !ar31
#   Direction GPIO pin (high indicates positive direction). This
#   parameter must be provided.
enable_pin: ar28
#   Enable pin (default is enable high; use ! to indicate enable
#   low). Alternatively, this may be a comma separated list of pins to
#   enable. If this parameter is not provided then the stepper motor
#   driver must always be enabled.
step_distance: 0.0675
#   Distance in mm that each step causes the axis to travel. This
#   parameter must be provided.
endstop_pin: ^ar51
#   Endstop switch detection pin. This parameter must be provided for
#   the X, Y, and Z steppers on cartesian style printers.
#position_min: 0
#   Minimum valid distance (in mm) the user may command the stepper to
#   move to.  The default is 0mm.
position_endstop: 0
#   Location of the endstop (in mm). This parameter must be provided
#   for the X, Y, and Z steppers on cartesian style printers.
position_max: 480
#   Maximum valid distance (in mm) the user may command the stepper to
#   move to. This parameter must be provided for the X, Y, and Z
#   steppers on cartesian style printers.
homing_speed: 60.0
#   Maximum velocity (in mm/s) of the stepper when homing. The default
#   is 5mm/s.
second_homing_speed: 10.0
#   Velocity (in mm/s) of the stepper when performing the second home.
#   The default is homing_speed/2.
homing_retract_dist: 10.0
#   Distance to backoff (in mm) before homing a second time during
#   homing. Set this to zero to disable the second home. The default
#   is 5mm.
#homing_positive_dir:
#   If true, homing will cause the stepper to move in a positive
#   direction (away from zero); if false, home towards zero. The
#   default is true if position_endstop is near position_max and false
#   if near position_min.

# The stepper_y section is used to describe the stepper controlling
# the Y axis in a cartesian robot. It has the same settings as the
# stepper_x section.
[stepper_y]
step_pin: ar4
dir_pin: !ar27
enable_pin: ar26
step_distance: .005625
endstop_pin: ^ar47
position_endstop: 0
position_max: 480
homing_speed: 60.0
second_homing_speed: 10.0
homing_retract_dist: 10.0

# The stepper_z section is used to describe the stepper controlling
# the Z axis in a cartesian robot. It has the same settings as the
# stepper_x section.
[stepper_z]
step_pin: ar3
dir_pin: ar23
enable_pin: ar24
step_distance: .00635
endstop_pin: ^ar49
position_endstop: 505
position_max: 505
homing_speed: 100.0
second_homing_speed: 25
homing_retract_dist: 10.0

# The extruder section is used to describe both the stepper
# controlling the printer extruder and the heater parameters for the
# nozzle. The stepper configuration has the same settings as the
# stepper_x section and the heater configuration has the same settings
# as the heater_bed section (described below).
[extruder]
step_pin: ar2
dir_pin: !ar15
enable_pin: ar16
step_distance: .0125
nozzle_diameter: 8
#   Diameter of the nozzle orifice (in mm). This parameter must be
#   provided.
filament_diameter: 8
blower_pin: !ar8
hardware_pwm: True
pump_pin: ar44
pellet_sensor_pin: !ar53
#   The nominal diameter of the raw filament (in mm) as it enters the
#   extruder. This parameter must be provided.
#max_extrude_cross_section:
#   Maximum area (in mm^2) of an extrusion cross section (eg,
#   extrusion width multiplied by layer height). This setting prevents
#   excessive amounts of extrusion during relatively small XY moves.
#   If a move requests an extrusion rate that would exceed this value
#   it will cause an error to be returned. The default is: 4.0 *
#   nozzle_diameter^2
max_extrude_only_distance: 500000.0
#   Maximum length (in mm of raw filament) that a retraction or
#   extrude-only move may have. If a retraction or extrude-only move
#   requests a distance greater than this value it will cause an error
#   to be returned. The default is 50mm.
#max_extrude_only_velocity:
#max_extrude_only_accel:
#   Maximum velocity (in mm/s) and acceleration (in mm/s^2) of the
#   extruder motor for retractions and extrude-only moves. These
#   settings do not place any limit on normal printing moves. If not
#   specified then they are calculated to match the limit an XY
#   printing move with a cross section of 4.0*nozzle_diameter^2 would
#   have.
#pressure_advance: 0.0
#   The amount of raw filament to push into the extruder during
#   extruder acceleration. An equal amount of filament is retracted
#   during deceleration. It is measured in millimeters per
#   millimeter/second. The default is 0, which disables pressure
#   advance.
#pressure_advance_lookahead_time: 0.010
#   A time (in seconds) to "look ahead" at future extrusion moves when
#   calculating pressure advance. This is used to reduce the
#   application of pressure advance during cornering moves that would
#   otherwise cause retraction followed immediately by pressure
#   buildup. This setting only applies if pressure_advance is
#   non-zero. The default is 0.010 (10 milliseconds).
#
# The remaining variables describe the extruder heater.
heater_pin: ar52
#   PWM output pin controlling the heater. This parameter must be
#   provided.
#max_power: 1.0
#   The maximum power (expressed as a value from 0.0 to 1.0) that the
#   heater_pin may be set to. The value 1.0 allows the pin to be set
#   fully enabled for extended periods, while a value of 0.5 would
#   allow the pin to be enabled for no more than half the time. This
#   setting may be used to limit the total power output (over extended
#   periods) to the heater. The default is 1.0.
sensor_type: AD8495
#   Type of sensor - this may be "EPCOS 100K B57560G104F", "ATC
#   Semitec 104GT-2", "NTC 100K beta 3950", "Honeywell 100K
#   135-104LAG-J01", "NTC 100K MGB18-104F39050L32", "AD595", "PT100
#   INA826", "MAX6675", "MAX31855", "MAX31856", or "MAX31865".
#   Additional sensor types may be available - see the
#   example-extras.cfg file for details. This parameter must be
#   provided.
sensor_pin: ar60
#   Analog input pin connected to the sensor. This parameter must be
#   provided.
#pullup_resistor: 4700
#   The resistance (in ohms) of the pullup attached to the
#   thermistor. This parameter is only valid when the sensor is a
#   thermistor. The default is 4700 ohms.
#inline_resistor: 0
#   The resistance (in ohms) of an extra (not heat varying) resistor
#   that is placed inline with the thermistor. It is rare to set this.
#   This parameter is only valid when the sensor is a thermistor. The
#   default is 0 ohms.
adc_voltage: 3.3
#   The ADC comparison voltage. This parameter is only valid when the
#   sensor is an AD595 or "PT100 INA826". The default is 5 volts.
voltage_offset: 1.24
#   The offset voltage applied to the AD8495 chip REF pin.
#smooth_time: 2.0
#   A time value (in seconds) over which temperature measurements will
#   be smoothed to reduce the impact of measurement noise. The default
#   is 2 seconds.
control: pid
#   Control algorithm (either pid or watermark). This parameter must
#   be provided.
pid_Kp: 30
pid_Ki: 0.172
pid_Kd: 430
#pid_integral_max:
#   The maximum "windup" the integral term may accumulate. The default
#   is to use the same value as max_power.
pwm_cycle_time: 0.025
#   Time in seconds for each software PWM cycle of the heater. It is
#   not recommended to set this unless there is an electrical
#   requirement to switch the heater faster than 10 times a second.
#   The default is 0.100 seconds.
#min_extrude_temp: 170
#   The minimum temperature (in Celsius) at which extruder move
#   commands may be issued. The default is 170 Celsius.
min_temp: 0
max_temp: 500
#   The maximum range of valid temperatures (in Celsius) that the
#   heater must remain within. This controls a safety feature
#   implemented in the micro-controller code - should the measured
#   temperature ever fall outside this range then the micro-controller
#   will go into a shutdown state. This check can help detect some
#   heater and sensor hardware failures. Set this range just wide
#   enough so that reasonable temperatures do not result in an
#   error. These parameters must be provided.

[verify_heater extruder]
hysteresis: 10

[thermistor provel_thermistor]
temperature1: 20
resistance1: 12493
temperature2: 42
resistance2: 4917
temperature3: 76
resistance3: 1432

# The heater_bed section describes a heated bed (if present - omit
# section if not present).
[heater_bed]
heater_pin: ar46
sensor_type: provel_thermistor
sensor_pin: ar59
control: pid
pid_Kp: 66.420
pid_Ki: 0.280
pid_Kd: 3942.857
#max_delta: 2.0
#   On 'watermark' controlled heaters this is the number of degrees in
#   Celsius above the target temperature before disabling the heater
#   as well as the number of degrees below the target before
#   re-enabling the heater. The default is 2 degrees Celsius.
min_temp: 0
max_temp: 110

[verify_heater heater_bed]
#max_error: 120
#   The maximum "cumulative temperature error" before raising an
#   error. Smaller values result in stricter checking and larger
#   values allow for more time before an error is reported.
#   Specifically, the temperature is inspected once a second and if it
#   is close to the target temperature then an internal "error
#   counter" is reset; otherwise, if the temperature is below the
#   target range then the counter is increased by the amount the
#   reported temperature differs from that range. Should the counter
#   exceed this "max_error" then an error is raised. The default is
#   120.
check_gain_time: 60
#   This controls heater verification during initial heating.  Smaller
#   values result in stricter checking and larger values allow for
#   more time before an error is reported. Specifically, during
#   initial heating, as long as the heater increases in temperature
#   within this time frame (specified in seconds) then the internal
#   "error counter" is reset. The default is 20 seconds for extruders
#   and 60 seconds for heater_bed.
#hysteresis: 5
#   The maximum temperature difference (in Celsius) to a target
#   temperature that is considered in range of the target. This
#   controls the max_error range check. It is rare to customize this
#   value. The default is 5.
#heating_gain: 2
#   The minimum temperature (in Celsius) that the heater must increase
#   by during the check_gain_time check. It is rare to customize this
#   value. The default is 2.

# [heater_generic cup_heater]
# gcode_id: C
#    # A mandatory parameter that is required for reporting the temperature
#    # through the M105 command.
# heater_pin: ar48
# max_power: 1.0
# sensor_type: provel_thermistor
# sensor_pin: ar58
# control: pid
# pid_Kp: 22.2
# pid_Ki: 1.08
# pid_Kd: 114
# min_temp: 0
# max_temp: 200

[temperature_sensor enclosure]
gcode_id: E
sensor_type: provel_thermistor
sensor_pin: ar57
min_temp: 0
max_temp: 100
#   See the heater_generic section above for the definition of this
#   parameter.


# Print cooling fan (omit section if fan not present).
[fan]
pin: !ar7
#   PWM output pin controlling the fan. This parameter must be
#   provided.
#max_power: 1.0
#   The maximum power (expressed as a value from 0.0 to 1.0) that the
#   pin may be set to. The value 1.0 allows the pin to be set fully
#   enabled for extended periods, while a value of 0.5 would allow the
#   pin to be enabled for no more than half the time. This setting may
#   be used to limit the total power output (over extended periods) to
#   the fan. If this value is less than 1.0 then fan speed requests
#   will be scaled between zero and max_power (for example, if
#   max_power is .9 and a fan speed of 80% is requested then the fan
#   power will be set to 72%). The default is 1.0.
#shutdown_speed: 0
#   The desired fan speed (expressed as a value from 0.0 to 1.0) if
#   the micro-controller software enters an error state. The default
#   is 0.
cycle_time: 0.005
#   The amount of time (in seconds) for each PWM power cycle to the
#   fan. It is recommended this be 10 milliseconds or greater when
#   using software based PWM. The default is 0.010 seconds.
hardware_pwm: True
#   Enable this to use hardware PWM instead of software PWM. Most fans
#   do not work well with hardware PWM, so it is not recommended to
#   enable this unless there is an electrical requirement to switch at
#   very high speeds. When using hardware PWM the actual cycle time is
#   constrained by the implementation and may be significantly
#   different than the requested cycle_time. The default is False.
kick_start_time: 1.0
#   Time (in seconds) to run the fan at full speed when first enabling
#   it (helps get the fan spinning). The default is 0.100 seconds.

[output_pin exhaust_blower]
pin: !ar9
pwm: True
#value:
#shutdown_value:
cycle_time: 0.005
hardware_pwm: True
# scale:

# Micro-controller information.
[mcu]
serial: /dev/serial/by-id/usb-Klipper_Klipper_firmware_12345-if00
#   The serial port to connect to the MCU. If unsure (or if it
#   changes) see the "Where's my serial port?" section of the FAQ. The
#   default is /dev/ttyS0
baud: 250000
#   The baud rate to use. The default is 250000.
pin_map: arduino
#   This option may be used to enable Arduino pin name aliases. The
#   default is to not enable the aliases.
restart_method: command
#   This controls the mechanism the host will use to reset the
#   micro-controller. The choices are 'arduino', 'rpi_usb', and
#   'command'. The 'arduino' method (toggle DTR) is common on Arduino
#   boards and clones. The 'rpi_usb' method is useful on Raspberry Pi
#   boards with micro-controllers powered over USB - it briefly
#   disables power to all USB ports to accomplish a micro-controller
#   reset. The 'command' method involves sending a Klipper command to
#   the micro-controller so that it can reset itself. The default is
#   'arduino' if the micro-controller communicates over a serial port,
#   'command' otherwise.

[force_move]
enable_force_move: True

[gcode_macro purge_barrel]
gcode:
  FORCE_MOVE STEPPER=extruder DISTANCE=10000 VELOCITY=1000

# The printer section controls high level printer settings.
[printer]
kinematics: cartesian
#   This option must be "cartesian" for cartesian printers.
max_velocity: 2000
#   Maximum velocity (in mm/s) of the toolhead (relative to the
#   print). This parameter must be specified.
max_accel: 3000
#   Maximum acceleration (in mm/s^2) of the toolhead (relative to the
#   print). This parameter must be specified.
#max_accel_to_decel:
#   A pseudo acceleration (in mm/s^2) controlling how fast the
#   toolhead may go from acceleration to deceleration. It is used to
#   reduce the top speed of short zig-zag moves (and thus reduce
#   printer vibration from these moves). The default is half of
#   max_accel.
max_z_velocity: 100
#   For cartesian printers this sets the maximum velocity (in mm/s) of
#   movement along the z axis. This setting can be used to restrict
#   the maximum speed of the z stepper motor on cartesian
#   printers. The default is to use max_velocity for max_z_velocity.
max_z_accel: 30
#   For cartesian printers this sets the maximum acceleration (in
#   mm/s^2) of movement along the z axis. It limits the acceleration
#   of the z stepper motor on cartesian printers. The default is to
#   use max_accel for max_z_accel.
#square_corner_velocity: 5.0
#   The maximum velocity (in mm/s) that the toolhead may travel a 90
#   degree corner at. A non-zero value can reduce changes in extruder
#   flow rates by enabling instantaneous velocity changes of the
#   toolhead during cornering. This value configures the internal
#   centripetal velocity cornering algorithm; corners with angles
#   larger than 90 degrees will have a higher cornering velocity while
#   corners with angles less than 90 degrees will have a lower
#   cornering velocity. If this is set to zero then the toolhead will
#   decelerate to zero at each corner. The default is 5mm/s.


# Looking for more options? Check the example-extras.cfg file.
